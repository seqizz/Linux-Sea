<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <title>Linux Nedir?</title>

  <section>
    <title>Giriş</title>

    <para>Masaüstü sistemlerin gerçeklerine baktığımızda, Linux o kadar da 
    büyük bir pazar payına sahip değil (pazar araştırmaları ortalama %3 
    göstermekte). Yine de muhtemelen iki veya daha fazla Linux kullanan 
    tanıdığınız vardır.</para>

    <para>Her neyse, %3 az bir rakama denk gelmez. Hiç toplam kaç masaüstü 
    bilgisayar bulunduğunu düşündünüz mü? (Ben yaptım, işin içinden çıkamadım) 
    Hatta diğer pazarları da işin içine katarsanız (gömülü sistemler, sunucular vs) 
    Linux'un pazar payı artmakta.</para>

    <para>Yine de, çoğu insanın Linux'un ne olduğu ve nasıl kullanılacağı 
    hakkında bir fikri bulunmamakta. Bu kitapta, bir kullanıcının gözüyle, 
    teknik ve hızlı bir biçimde Linux işletim sistemine giriş yapacağız. 
    Özgür yazılımın avantajları ve dezavantajlarına fazla dalmayacağım 
    (birkaç paragraftan kimseye zarar gelmez) ve Linux işletim sisteminin 
    tarihçesinden de bahsetmeyeceğim. Bu konular hakkında daha detaylı bilgiyi 
    bu bölümün sonundaki <link linkend="whatislinux_resources">Diğer Kaynaklar</link> 
    bölümünde bulabilirsiniz.</para>

    <para>Linux işletim sisteminin tümünü kapsayan bir kitap olmak için, 
    "işletim sistemi" tanımının üzerinde durmakta fayda var. Linux modüler 
    ve açık bir sistemdir. Yani Linux işletim sisteminin her parçası kullanıcı 
    tarafından incelenebilir bir biçimde şeffaftır. İşletim sisteminin 
    yapısını anlamadıkça bu parçaları değerlendirmek bir kullanıcı için 
    imkansız. Bu yüzden bu bölümde işletim sistemi kavramını açıklayacağım.</para>

    <para>İşletim sisteminin görevlerinden bahsettikten sonra, gerçek Linux 
    işletim sistemleri ile devam edeceğim: Linux dağıtımları.</para>

    <para>Her bölümün sonunda size verilecek birtakım alıştırmalar olacak. 
    Her sorunun cevabını bu kitapta bulamayabilirsiniz. Bu yüzden 
    Linux ile ilgili diğer kaynakları araştırmanız gerekecek. 
    Kitabın sonunda sorular için cevap veya ipuçları yer almakta.</para>
  </section>

  <section>
    <title>Bir İşletim Sisteminin Anatomisi</title>

    <para>Bir işletim sistemi aslında hepsi özel bir amaç için dizayn 
    edilmiş bir yığın yazılımdan oluşur. Şimdi çekirdek, kütüphaneler, 
    sistem araçları ve geliştirme araçlarına göz atalım.</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Çekirdek</emphasis> bir işletim sisteminin 
        merkezini oluşturur: Donanım ile yazılım arasındaki iletişimi sağlar, 
        sistem kaynaklarını yönetir (İşlemci, ağ, hafıza gibi) 
        ve programcılara arayüzler sunarak aygıta yönelik 
        programlamanın zorluğunu aşmaya yardımcı olur.</para>
      </listitem>

      <listitem>
        <para><emphasis>Sistem kütüphaneleri</emphasis> de programcıların 
        işletim sistemi için programlar yazmasına yardımcı olacak işlemleri 
        depolar. Kütüphanelerde işlem oluşturma ve yönetimi, dosya işlemleri 
        ve ağ programlama gibi konularda önceden tanımlanmış yöntemler bulunur. 
        Kütüphaneler işletim sisteminin önemli bir parçasıdır 
        çünkü çekirdekle direkt olarak iletişime geçemezsiniz (geçmemelisiniz): 
        Kütüphaneler bu yüzden çekirdeğin karmaşık yapısına müdahale etmeden 
        uygulama yazmaya yardımcı olur.</para>
      </listitem>

      <listitem>
        <para><emphasis>Sistem araçları</emphasis> sistem kütüphaneleri 
        kullanılarak yöneticilerin sistemi yönetmesi için oluşturulmuştur. 
        Sistemi yönetmek dediğimizde buna işlemleri yönetmek, 
        dosya sisteminde dolaşmak, uygulamaları çalıştırmak, ağı ayarlamak 
        gibi işlemler girer.</para>
      </listitem>

      <listitem>
        <para><emphasis>Geliştirme araçları</emphasis> sistemde 
        yeni uygulamalar oluşturmak için vardır. Sistemin çalışması için 
        gerekli bir parça değildir. Ancak Gentoo için gereklidir (bunun 
        sebebi üzerinde daha sonra duracağız). Bu araçlar derleyicileri 
        (kodları makinanın anlayacağı dile çeviren uygulamalar), 
        bağlayıcılar (makina kodunu toplayıp çalışan bir dosya oluşturan 
        uygulamalar) ve diğer yardımcı araçlardan oluşur.</para>
      </listitem>
    </itemizedlist>

    <para>Sistemdeki diğer kütüphaneler de geliştiricilerin işini, diğer 
    geliştiricilerin önceden yazdığı kodları kullanmasına olanak sağlayarak, 
    kolaylaştıran dosyalardır. Bu tür kütüphanelere grafiksel kütüphaneler 
    (pencere yönetimi için) ve bilimsel kütüphaneler örnek verilebilir. 
    Her işletim sisteminde mecburi olmamalarına rağmen eğer özel bir 
    uygulama çalıştırmak isterseniz (Örn. ofis uygulamaları, 
    çoklu ortam uygulamaları...) çalışması için bağımlı olduğu 
    kütüphanelerin de sistemde bulunması lazım.</para>

    <section>
      <title>Çekirdek</title>

      <para>Çekirdek<indexterm>
          <primary>kernel</primary>
        </indexterm>genellikle dört temel sorumluluğa sahiptir:</para>

      <itemizedlist>
        <listitem>
          <para>aygıt yönetimi</para>
        </listitem>

        <listitem>
          <para>hafıza yönetimi</para>
        </listitem>

        <listitem>
          <para>işlem yönetimi</para>
        </listitem>

        <listitem>
          <para>sistem çağrılarının değerlendirilmesi</para>
        </listitem>
      </itemizedlist>

      <para>İlk sorumluluk <emphasis>aygıt yönetimidir</emphasis><indexterm>
          <primary>aygıt yönetimi</primary>
        </indexterm>. Bir bilgisayar sistemine birçok aygıt (donanım) 
      bağlıdır. Sadece işlemci ve RAM değil, diskler, ağ donanımları, 
      ekran kartları, ses kartları vs. Her donanım farklı çalıştığı için, 
      çekirdeğin donanımın özelliklerini ve kullanılış biçimlerini bilmesi 
      gerekmektedir. Bu bilgiler çekirdekteki aygıt sürücüsünde saklanır. 
      Bu sürücü olmadan çekirdek aygıtı tanıyamayacak, bu yüzden 
      kontrol etmesi de mümkün olmayacaktır.</para>

      <para>Aygıt sürücüleri ile beraber, çekirdek ayrıca aygıtlar 
      arasındaki iletişimi de yönetir. Paylaşılan bileşenleri yöneterek 
      bütün sürücülerin birlikte sorunsuz çalışmasından sorumludur. Bütün 
      iletişim kesin kurallara dayanır, çekirdek de bu kurallara 
      uyulduğundan emin olur.</para>

      <para><emphasis>Hafıza yönetimi</emphasis> <indexterm>
          <primary>hafıza yönetimi</primary>
        </indexterm>bileşeni kullanılan ve kullanılmayan hafızayı kontrol 
      altında tutar, gerekli işlemlere hafıza alanı açıp uygulamaların 
      birbirlerinin bilgisini kullanmaması için bu alanları kontrol eder. Bu 
      işlem için sanal adresler kullanılır. Ayrıca hafızada tutulmamasına 
      rağmen kullanılan bilgiler olabilir. Bu bilgiler "takas alanı" 
      denilen, diskin bir bölümünde tutulur. Hafızaya göre çok daha yavaş 
      olduğu için, fazla erişime ihtiyaç olmayan ancak hafızada yer kaplayan 
      bilgiler bu bölgeye gönderilir.</para>

      <para>Her uygulamanın yeterli işlemci gücü kullanmasından emin olmak 
      için, çekirdek işlemlere öncelikler atar ve buna göre işlemci kullanım 
      süreleri belirler.
      <emphasis>İşlem yönetimi</emphasis> <indexterm>
          <primary>işlem yönetimi </primary>
        </indexterm>sadece işlemci ve sıra işlemleri ile sınırlı değildir. 
      Aynı zamanda güvenlik öncelikleri, işlem sahiplik bilgileri ve 
      işlemler arasındaki iletişimi de kapsar.</para>

      <para>Son olarak çalışan bir sistemin, uygulamaların çalışabilmesi için çekirdek ile iletişim kurmalarının yolunu sağlaması gerekmektedir. Çekirdekten bilgi almak veya çekirdeğe bir donanım işlemi yaptırıp sonucu hakkında dönüt almak gerektiği durumlarında uygulamalar 
      <emphasis>sistem çağrıları</emphasis><indexterm>
          <primary>sistem çağrıları</primary>
        </indexterm> kullanır. Elbette bu çağrılar sistemin çalışmasını 
      bozacak sakıncalı işlemlere izin vermeyecek şekilde dizayn edilmelidir.</para>

      <para>Gentoo gibi bir Linux işletim sistemi, çekirdek olarak 
      Linux kullanır.</para>
    </section>

    <section>
      <title>Sistem kütüphaneleri</title>

      <para>Çekirdek tek başına pek fazla işlem yapamayacağı için, uygulamalar tarafından tetiklenmesi gerekir. İşlevselliği artıran bu uygulamalar sistem çağrılarını kullanmayı bilmelidir. Her işletim sisteminin sistem çağrıları farklı olduğu için, programcılar bu çağrıları belirli standartlara göre kodlarlar. İşletim sistemleri de bu standartları desteklediği sürece bu çağrıları çekirdeğin anlayıcı bir hale,
      <indexterm>
          <primary>sistem kütüphaneleri</primary>
        </indexterm> kullanarak getirirler.</para>

      <para>Örnek bir standart olarak C dili kütüphanesi<indexterm>
          <primary>C kütüphanesi</primary>
        </indexterm> verilebilir ve muhtemelen sistem için en önemli 
      kütüphaneyi oluşturur. Bu kütüphane programcılara girdi/çıktı desteği, 
      matematiksel yöntemler, dosya işlemleri ve hafıza yönetimi gibi hayati 
      işlemleri gerçekleştirecek ortamı sağlar. Bu sayede programcı, C dilini 
      destekleyen her işletim sisteminde çalışabilen uygulamalar 
      oluşturabilir. Bu kodlar C kütüphanesi sayesinde (gerek varsa) 
      çekirdeğin anlayacağı sistem çağrılarına dönüştürülür. Bu sayede 
      programcının her işletim sistemi için ayrı bilgi sahibi olmasına ve ayrı 
      kodlar yazmasına gerek kalmaz.</para>

      <para>"Sistem kütüphanesi" kavramının belirli bir tanımı yoktur. Bu 
      kitabın yazarına göre sistem kütüphaneleri, çalışan en temel işletim 
      sistemi kurulumunda bulunan kütüphanelerdir. Bu yüzden sistem 
      kütüphaneleri işletim sisteminin çeşidine (hatta Linux altında dağıtımdan 
      dağıtıma) değişir. Çoğu Linux dağıtımı aynı sistem kütüphanelerine 
      sahiptir çünkü tüm Linux dağıtımları Linux için yazılmış ve aynı 
      kütüphaneleri kullanan uygulamaları çalıştırabilmektedir. Ancak bazı 
      dağıtımlar bir kütüphaneyi minimal bir kurulum için gerekli görmeyebilir.</para>

      <para>Linux sistemlerde en iyi bilinen sistem kütüphanesi GNU C 
      kütüphanesidir, <indexterm>
          <primary>glibc</primary>
        </indexterm> olarak da bilinir.</para>
    </section>

    <section>
      <title>Sistem Araçları</title>

      <para>Sistem kütüphaneleri gibi, <emphasis>sistem araçları</emphasis><indexterm>
          <primary>sistem araçları</primary>
        </indexterm>nın da belirli bir özelliği bulunmamaktadır. Ama sistem 
      kütüphanelerinin aksine, sistem araçları kullanıcıya daha görünür 
      durumdadır. Bu yüzden nerdeyse bütün Linux dağıtımları aynı veya benzer 
      özelliklere sahip sistem araçlarını kullanır.</para>

      <para>Ancak sistem aracı nedir? Şöyle açıklayabiliriz: Çekirdek ve 
      kütüphaneler ile sisteminizi yönetemezsiniz. Sisteme bazı komutlar 
      vermeniz gerekir. Bu komutlar dosya işlemleri (dizinler arası gezinti, 
      dosya oluşturma/silme, dosyaları listeleme...), bilgi yönetimi (yazı 
      aramaları, sıkıştırma, dosyalar arasındaki farkları görüntüleme...), 
      işlem yönetimi (yeni işlemleri çalıştırma, işlemlerin listesini alma, 
      çalışan işlemleri sonlandırma...), yetkiye dayalı işler (dosyanın 
      sahibini değiştirme, kullanıcı kimliklerini değiştirme, dosya izinlerini 
      güncelleme) gibi temel işlemlerdir.</para>

      <para>Eğer bu işlemlerle nasıl başa çıkacağınızı bilmiyorsanız, işletim 
      sisteminizi kullanmayı bilmiyorsunuz demektir. Bazı işletim sistemleri bu 
      görevleri karmaşık araçların arkasına gizlerken, bazıları da her bir 
      görev için basit ve ufak araçlar sunar. Unix (ve Linux) da böyledir. 
      Linux sistemler genellikle bu işlemleri GNU temel araçları sayesinde 
      yapar.</para>
    </section>

    <section>
      <title>Geliştirme Araçları</title>

      <para>Yukardaki üç bileşen ile çalışan bir işletim sistemine sahip 
      olursunuz. Her istediğinizi yapamayabilirsiniz ancak yapabilir olana 
      kadar sisteminizi güncelleyebilirsiniz. Nasıl mı? İstediğiniz işlemi 
      yerine getiren uygulamaları ve kütüphaneleri sisteminize kurarak.</para>

      <para>Bu uygulamalar ve kütüphaneler de tabi ki programcılar tarafından 
      yazılmış ve sisteminizde çalışmak için "derlenmesi" gereken kodlardan 
      oluşur. Kısaca sisteminizin anlayacağı dile çevrilmeleri gerekmektedir. 
      Gentoo Linux gibi bazı işletim sistemlerinde, başkaları tarafından 
      derlenmiş uygulamaları kullanmak yerine, uygulamaları kendiniz 
      derlersiniz. Bunu yapabilmek için kurmak istediğiniz uygulamanın kaynak 
      kodlarına ve derleme için gerekli araçlara ihtiyacınız vardır.</para>

      <para>Bu araçlar <emphasis>araç zinciri</emphasis><indexterm>
          <primary>araç zinciri</primary>
        </indexterm> (toolchain) olarak adlandırılır: Çalışan bir uygulama 
      oluşturmak için zincir gibi çalışırlar. Genelde araç zinciri bir metin 
      editörü (kodu yazmak için), bir derleyici (kodu makinanın anlayacağı dile 
      çevirmek için), bağlayıcı (birçok makina kodunu birleştirip gerekli 
      "paylaşılan" kütüphaneleri de dahil ederek çalışan bir dosya oluşturmak 
      için) ve kütüphanelerden oluşur.</para>

      <para>Araç zinciri bir geliştirici için en gerekli 
      <emphasis>geliştirme aracıdır</emphasis><indexterm>
          <primary>geliştirme aracı</primary>
        </indexterm>. Ancak tüm ihtiyacı değildir. Örneğin,
      görsel uygulamalar üreten geliştiriciler programları için grafiklere hatta 
      çoklu ortam dosyalarına (ses, video) ihtiyaç duyar. Geliştirme araçları 
      bir geliştiricinin birşeyler oluşturmasına yardımcı olan araçların genel 
      adıdır ve geliştiriciler tarafından ihtiyaç duyulurlar, geliştirici 
      olmayan ortalama bir kullanıcı için sistemde bulunmalarına gerek yoktur..
     </para>

      <para>En bilinen geliştirme araçları da GNU vakfı tarafından sağlanır: GNU Derleyici Koleksiyonu, nam-ı diğer gcc<indexterm>
          <primary>gcc</primary>
        </indexterm>.</para>
    </section>

    <section>
      <title>Son Kullanıcı Araçları</title>

      <para>Bir geliştiricinin oluşturduğu uygulama, son kullanıcı uygulaması 
      olarak adlandırılır. Bu uygulamalar sistemi diğer sistemlerden ayıran, 
      kullanıcının ihtiyacına göre sistemde bulunan araçlardır. Bunlara, normal 
      bir kullanıcının kullandığı uygulamalardan ofis uygulamaları, internet 
      tarayıcıları, grafik düzenleme yazılımları gibi örnekler verebiliriz. Son 
      kullanıcı uygulamaları sistemin çalışması için zorunlu değillerdir ama 
      kullanıcı için önem taşıdıklarından sistemde bulunmaları gerekir.</para>

      <para>Çoğu işletim sistemi son kullanıcı araçlarını işletim sistemi ile 
      beraber sunmaz. Çünkü seçilemeyecek kadar fazla alternatifleri vardır. 
      Bazı işletim sistemleri bu uygulamaları kullanıcıya seçtirmek için bile 
      herhangi bir parça barındırmaz (Microsoft Windows gibi) ve kurulum 
      işlemini geliştiricilerin hazırladığı kurulum programına bırakır. 
      Bazıları ise ufak araçlar ile bu uygulamaların arasından seçim yapması 
      için kullanıcıya sunar. Bu sayede kullanıcı, ihtiyacı olan yazılımı 
      kurmak için internette (hatta daha kötüsü, marketlerin yazılım 
      raflarında) aramak zorunda kalmadan sistemine kurabilir.</para>

      <para>İyi bilinen örnekleri olarak ofis uygulamaları,
      grafik araçları, çokluortam oynatıcılar, iletişim yazılımları ve
      internet tarayıcıları verilebilir.</para>
    </section>

    <section>
      <title>Tamam, Pes, GNU Ne Demek?</title>

      <para>GNU projesi sayısız programcının ve geliştiricinin, Unix tarzı ücretsiz bir işletim sistemi ortaya çıkarmak üzere bir araya gelmesiyle oluşmuştur. GNU<indexterm>
          <primary>GNU</primary>
        </indexterm>'nun açılımı <emphasis>GNU is Not Unix</emphasis>, "GNU Unix Değildir" 
      anlamına gelir. Çünkü Unix'e benzeyen ancak içerisinde Unix kodu 
      bulundurmayan, ücretsiz (ve öyle kalacak olan) bir işletim sistemidir. 
      GNU projesinin arkasındaki kuruluş olan GNU vakfı, üretilen yazılımların 
      ücretsiz olmasından çok "özgür" olmasını önemser. Bu özgürlüğe kaynak 
      kodlarını inceleme, kopyalama, değiştirme ve değiştirilmiş halde tekrar 
      yayınlama özgürlükleri de dahildir.</para>

      <para>This idea of free software is a noble thought that is active in
      many programmers' minds: hence many software titles are freely
      available. Software is generally accompanied by a license that explains
      what you can and cannot do with it (also known as the "End User License
      Agreement"). Free Software also has such a license - unlike the EULAs
      they actually allow most things instead of denying it. An example of
      such license is the GPL - GNU General Public License.</para>
    </section>
  </section>

  <section>
    <title>Linux as the Kernel of the Linux Operating System</title>

    <para>When we look at a Linux Operating System, its core component is its
    kernel. The kernel all Linux Operating System use is the Linux kernel, or
    just Linux. Yes, that's right, the Linux Operating System is called after
    the kernel, Linux<indexterm>
        <primary>linux kernel</primary>
      </indexterm>.</para>

    <para>Now although all Linux Operating Systems use Linux as their kernel,
    many of them use a different flavour. This is because the kernel
    development has several branches. The most important one I call the
    <emphasis>vanilla</emphasis> kernel. This kernel is the main development
    kernel where most kernel developers work on; every other kernel is based
    on this kernel. Other kernels introduce features that the vanilla kernel
    doesn't want yet (or has tossed away in favour of another feature); still,
    these kernels are fully compatible with the vanilla kernel.</para>

    <para>The Linux kernel saw its first light in 1991 and is created (and
    still maintained) by Linus Torvalds. It grew rapidly (in 1994, version
    1.0.0 saw the light) both in size (1.0.0 had more than 175000 lines of
    code) and in popularity. Over the years, its development model stayed the
    same: there are few major players in the development who decide what goes
    in and what stays out of the kernel code, but the majority of
    contributions happen from several hundreds volunteers (kernel 2.6.21 had
    contributions from more than 800 individuals).</para>

    <para>The latest kernel version at the time of writing is 2.6.32.1. The
    first two numbers play the role of the major version, the last number
    denotes a plain bug fix. The intermediate number is the one that
    increments most often: for every increment, users (and developers) know
    that the kernel has new features but, as the major number doesn't change,
    the kernel remains fully compatible with older versions (so it is safe to
    upgrade).</para>

    <para>Once a new version of the Linux kernel is released, it isn't
    distributed to all of its users. No, this is where distributions come into
    play...</para>
  </section>

  <section>
    <title>Linux Operating Systems: Distributions</title>

    <para>If an end user would want to install a Linux Operating System
    without additional help, he would need to build a Linux kernel himself,
    build the components of the operating system (like the libraries, end
    tools ...) and keep track of changes in the free software world (like new
    versions or security fixes). And although all this is perfectly possible
    (look for the <emphasis>Linux From Scratch</emphasis> project), most users
    would want something that is a bit more... user friendly.</para>

    <para>Enter distributions<indexterm>
        <primary>distribution project</primary>
      </indexterm>. A distribution project (like the Gentoo Project) is
    responsible for a Linux Operating System (the distribution) to such an
    extend that for the end user, the distribution project is
    <emphasis>the</emphasis> point of contact for his Linux
    installation.</para>

    <para>Distribution projects make choices regarding the software:</para>

    <itemizedlist>
      <listitem>
        <para>How should the users install the operating system?</para>

        <para>Perhaps users are encouraged to perform as many steps as
        possible during the installation process (the "distribution" <ulink
        url="http://www.linuxfromscratch.org/">Linux from Scratch</ulink>
        probably has the most intensive installation process). The very
        inverse is an installation CD or USB image that doesn't even require
        any configuration or installation: it just boots the environment and
        you're ready to start using the Linux distribution.</para>
      </listitem>

      <listitem>
        <para>What installation options are there (CD, DVD, network, Internet,
        ... ?)</para>

        <para>Most Linux distributions offer an installation CD/DVD as it is
        the most popular method for acquiring software. But many other
        installation options exist. You can install a distribution from a
        network using net booting (a popular approach in enterprise
        environments as it makes unattended installations possible) or from
        within another operating system.</para>
      </listitem>

      <listitem>
        <para>What software should be available to the user?</para>

        <para>Popular desktop Linux distributions offer a wide range of
        software to the end users. This allows the distribution to become
        widely accepted as it fits the needs of many users. However, more
        advanced distributions exist that focus on a particular market (like
        set-top boxes for multimedia presentations, firewalls and network
        management, home automation appliances, ...) and of course, these
        distributions offer different software titles to the users.</para>
      </listitem>

      <listitem>
        <para>How is the available software built (specific system, features
        ...)?</para>

        <para>If a distribution wants the software to run on as many processor
        types as possible (Pentium, i7, Athlon, Xeon, Itanium, ...) it needs
        to build the software for a generic platform (say i686) rather than
        for a specific one (Itanium). Of course, this means that the software
        doesn't use all features that new processors provide, but the software
        does run on many more systems.</para>

        <para>The same is true for features supported by certain software
        titles. Some software titles offer optional support for ipv6, ssl,
        truetype fonts, ... but if you want it, you need to compile this
        support in the application. Distributions that offer software in a
        binary format (most distributions do) need to make this choice for
        their users. More than often, they attempt to offer support for as
        many features as possible, but not all end-users would need or even
        want this.</para>
      </listitem>

      <listitem>
        <para>Is internationalization of the software important?</para>

        <para>Some distributions are targeting specific user groups tied to
        their language and geography. There are distributions that are fully
        localized to a specific group (say "Belgian Dutch-speaking users" or
        "Canadian French-speaking users"), but also distributions that try to
        offer localization for as many groups as possible.</para>
      </listitem>

      <listitem>
        <para>How should users update and maintain their system?</para>

        <para>Many distributions offer an automated software update process,
        but not all distributions offer a live upgrade process (where, once
        installed, your installation gradually builds up and becomes the
        latest version of that distribution without any specific actions).
        Some distributions even require you to boot from the latest
        installation CD and perform an upgrade step.</para>
      </listitem>

      <listitem>
        <para>How would a user configure his system?</para>

        <para>If you are a graphical Linux user, you definitely don't want to
        hear about configuration file editing or command-line actions to be
        taken. So, you will most likely look for distributions that offer a
        full graphical interface to configure your system. But some users do
        like the idea of writing the configuration files directly as it offers
        the largest flexibility (but also the highest learning curve) and
        distributions often work on these sentiments. Some distributions don't
        even allow you to update the configuration files directly as they
        (re)generate those files anyway (overwriting your changes).</para>
      </listitem>

      <listitem>
        <para>What is the target user group of the distribution?</para>

        <para>Most desktop distributions target home/office users, but there
        are distributions that target children or scientists. Some
        distributions are made for developers and others for elder people.
        There are distributions for visually impaired people and distributions
        for people without Internet access.</para>
      </listitem>

      <listitem>
        <para>What policies does the distribution put on its software?</para>

        <para>Organizations like FSF have a vision on how the (software) world
        should look like. Many distributions offer a way of implementing these
        visions. For instance, some distributions only allow software that is
        licensed under an FSF-approved license. Other distributions allow users
        to use non-free software. There are distributions that implement a
        higher security vision in the distribution, offering a more hardened
        approach to operating systems.</para>
      </listitem>

      <listitem>
        <para>Should the distribution be freely available?</para>

        <para>Of course, money is often a major decision point as well. Not
        all distributions are freely downloadable / available on the Internet,
        although the majority is. But even when the distribution is freely
        available, it might still be necessary to obtain commercial support,
        even just for the security updates of the distribution.</para>
      </listitem>

      <listitem>
        <para>...</para>
      </listitem>
    </itemizedlist>

    <para>You'll find several distributions in the world; each of those
    distribution projects answers the questions a bit different from the
    others. Hence, choosing the right distribution is often a quest where you
    have to answer many questions before you find the correct
    distribution.</para>

    <para>Of course, when you're starting with Linux, you probably don't have
    a strong opinion about these questions yet. That's okay because, if you
    want to start using Linux, you should start with the distribution of which
    you'll have the best support. Ask around, perhaps you have friends who
    might help you with Linux. And be honest, what better support is there
    than personal support?</para>

    <section>
      <title>What is a Distribution?</title>

      <para>A distribution<indexterm>
          <primary>distribution</primary>
        </indexterm> is a collection of software (called the
      packages<indexterm>
          <primary>package</primary>
        </indexterm>) bundled together in a coherent set that creates a fully
      functional environment. The packages contain software titles (build by
      other projects) and possibly patches (updates) specific for the
      distribution so that the package integrates better with other packages
      or blends in better with the overall environment. These packages are
      usually not just copies of the releases made by the other software
      projects but contain a lot of logic to fit the software in the global
      vision of the distribution.</para>

      <para>Take KDE<indexterm>
          <primary>KDE</primary>
        </indexterm> for example. KDE is a (graphical) desktop environment
      which bundles several dozens of smaller tools together. Some
      distributions provide a pristine KDE installation to their users, others
      change KDE a bit so that it has a different default look and
      such.</para>

      <para>Another example would be MPlayer<indexterm>
          <primary>MPlayer</primary>
        </indexterm>, a multimedia player especially known for its broad
      support of various video formats. However, if you want to view Windows
      Media Video files (WMV), you need to build in support for the (non-free)
      win32 codecs. Some distributions provide MPlayer with support for these
      codecs, others without. Gentoo Linux lets you choose if you want this
      support or not.</para>
    </section>

    <section>
      <title>What does a Distribution Provide?</title>

      <para>When you want to use a distribution, you <emphasis>can</emphasis>
      (but you don't have to) use tools built by the distribution project to
      ease several tasks:</para>

      <itemizedlist>
        <listitem>
          <para>to install the distribution you can use one or more
          installation tools provided by the distribution project</para>
        </listitem>

        <listitem>
          <para>to install additional packages on your system you can use one
          or more software management tools provided by the distribution
          project</para>
        </listitem>

        <listitem>
          <para>to configure your system you can use one or more configuration
          tools provided by the distribution project</para>
        </listitem>
      </itemizedlist>

      <para>I cannot stress enough the importance of the term
      <emphasis>can</emphasis>. You don't have to use the distributions'
      installation tools (you can always install a distribution differently),
      you don't have to install software using the software management tools
      (you can always build and install your software manually) and you don't
      have to configure your system with the configuration tools (you can
      always edit the configuration files of the various applications by
      hand).</para>

      <para>Why then does a distribution put all this effort in these tools?
      Because they make it a lot easier for the user to use his system. Take
      software installation as an example. If you don't use a software
      management tool, you need to build the software yourself (which can be
      different depending on the software you want to build), keep track of
      updates (both bug fixes and security fixes), make sure you have
      installed all the dependent software (software this depends on software
      that which depends on library a, b and c ...) and keep track of the
      installed files so that your system doesn't clutter up.</para>

      <para>Another major addition distributions provide are the software
      packages themselves. A software package contains a software title (think
      of the Mozilla Firefox browser) with additional information (such as a
      description of the software title, category information, depending
      software and libraries ...) and logic (how to install the software, how
      to activate certain modules it provides, how to create a menu entry in
      the graphical environments, how to build the software if it isn't built
      already, ...). This can result in a complex package, making it one of
      the reasons why distributions usually cannot provide a new package at
      the same day the software project itself releases a new version.</para>

      <para>For security fixes however, most information and logic stays the
      same so security fix releases by the software project usually result in
      a quick security fix release of the software package by the distribution
      project.</para>

      <para>Next to the software that is the distribution, a distribution
      project<indexterm>
          <primary>distribution project</primary>
        </indexterm> provides supporting items:</para>

      <itemizedlist>
        <listitem>
          <para>documentation about the distribution</para>
        </listitem>

        <listitem>
          <para>infrastructure where you can download the distribution and its
          documentation from</para>
        </listitem>

        <listitem>
          <para>daily package updates for new software</para>
        </listitem>

        <listitem>
          <para>daily security updates</para>
        </listitem>

        <listitem>
          <para>support for the distribution (which can be in the form of
          forums, e-mail support, telephone support or even more commercial
          contractual support)</para>
        </listitem>

        <listitem>
          <para>...</para>
        </listitem>
      </itemizedlist>

      <para>Now, a distribution project is more than all that. By bundling all
      packaging into a single project, developers can work together to build
      an operating system that extends the ''commercial-grade'' operating
      systems. To do this, most distribution projects have divisions for
      public relations, user relations, developer relations, release
      management, documentation and translations, etc.</para>
    </section>

    <section>
      <title>What is an Architecture?</title>

      <para>I haven't talked about architectures yet, but they are important
      nevertheless. Let me first define the concept of <emphasis>instruction
      set</emphasis>s.</para>

      <para>An instruction set<indexterm>
          <primary>instruction set</primary>
        </indexterm> of a CPU is the set of commands that that particular CPU
      understands. These commands perform a plethora on functions such as
      arithmetic functions, memory operations and flow control. Programs can
      be written using these functions but usually programmers use a higher
      level programming language because a program written in this specific
      language (called the <emphasis>assembly</emphasis><indexterm>
          <primary>assembly</primary>
        </indexterm> language of that CPU) can only be run on that CPU. That,
      and assembly is so low-level that it is far from easy to write a tool
      with it. The tools that still use assembly language are compilers (which
      translate higher-level programming language to assembly), boot loaders
      (which load an operating system into memory) and some core components of
      operating systems (the Linux kernel has some assembly code).</para>

      <para>Now, every CPU type has a different instruction set. The Intel
      Pentium IV has a different instruction set than the Intel Pentium III;
      the Sun UltraSPARC III has a different instruction set than the Sun
      UltraSPARC IIIi. Still, their instruction sets are very similar. This is
      because they are in the same family. CPUs of the same family understand
      a particular instruction set. Software tools built for that instruction
      set run on all CPUs of that family, but cannot take advantage of the
      entire instruction set of the CPU they run on.</para>

      <para>Families of CPUs are grouped in
      <emphasis>architectures</emphasis><indexterm>
          <primary>architecture</primary>
        </indexterm>. Architectures are global and represent the concept of an
      entire system; they describe how disks are accessed, how memory is
      handled, how the boot process is defined. These define the large,
      conceptual differences between system. For instance, the Intel
      compatible range of systems is grouped in the x86 architecture; if you
      boot such a system, its boot process starts with the BIOS<indexterm>
          <primary>BIOS</primary>
        </indexterm> (Basic Input-Output System). Sun Sparc compatible systems
      are grouped in the sparc architecture; if you boot such a system, its
      boot process starts with the Boot PROM.</para>

      <para>Architectures are important because Linux distributions often
      support multiple architectures and you should definitely know what
      architecture your system uses. It is most probably the x86 or amd64
      architecture (both are quite equivalent) but you should understand that
      other architecture exist as well. You will even find tools that are not
      supported for your architecture even though they are available for your
      distribution, or some packages will have the latest version available on
      one architecture and not yet on the others.</para>
    </section>
  </section>

  <section>
    <title>Myths Surrounding Linux</title>

    <para>Linux is frequently hyped in the media - sometimes with reason, most
    of the time without. Although I discussed what Linux is previously, a
    quick recap:</para>

    <blockquote>
      <para>Linux is a generic term referring to the Linux Operating System, a
      collection of tools running under the Linux kernel and most of the time
      offered through a Linux distribution project.</para>
    </blockquote>

    <para>Of course, this is often not clear for users unknown to the world
    beyond Microsoft Windows. Although the best way of discovering what Linux
    is is by using Linux, I feel it is important to debunk some myths before I
    continue with the rest of the book.</para>

    <section>
      <title>Myths</title>

      <para>A myth is a story which is popular, but not true. Myths
      surrounding Linux will always exist. The next few sections try to offer
      my ideas behind many of these myths...</para>

      <section>
        <title>Linux is hard to install</title>

        <para>It is always possible for someone to point to a Linux
        distribution that is difficult to install. The Linux From Scratch
        "distribution" is actually a document explaining the entire process
        for setting up a Linux distribution by building compilers, building
        software, placing files, etc. Yes, this is hard and might even be
        difficult if the documentation wasn't up to date.</para>

        <para>However, many distributions (most of them even) are simple to
        install. They offer the same installation approach as other operating
        systems (including Microsoft Windows) together with online help
        (on-screen help) and offline help (installation guides). Some
        distributions can even be installed with as little as two or three
        questions, and you can even use Linux without having to install it at
        all.</para>
      </section>

      <section>
        <title>There is no support for Linux</title>

        <para>There were days that Linux had no commercial support, but that
        was in the previous century. You can now obtain the Linux operating
        system from major software vendors such as Novell or RedHat (with
        support), or use a freely downloadable Linux distribution and get a
        contract with a company that offers support for that
        distribution.</para>

        <para>All distributions offer excellent free support as well
        (something I'll talk about in the next few chapters) and many have an
        active security follow-up, resulting in quick security fixes as soon
        as a vulnerability is found or reported. There is often no need for a
        desktop user to obtain commercial support as the freely available
        support channels offer a major advantage compared to some other,
        proprietary operating systems.</para>
      </section>

      <section>
        <title>Linux is free software, so security holes are easily
        found</title>

        <para>Actually, because it is free software, security holes are far
        more difficult to remain in the source code. There are too many eyes
        watching the source code and many free software projects have a very
        active developer community that checks and rechecks source code
        changes over and over again before they are pushed to the end
        user.</para>
      </section>

      <section>
        <title>Linux is non-graphical</title>

        <para>The Linux kernel is not a graphical kernel, but the tools that
        run beneath the Linux kernel can be graphical. Even more, most
        distributions offer a full graphical interface for every possible
        aspect of the operating system: it boots graphically, you work
        graphically, you install software graphically, you even troubleshoot
        issues graphically. Although you can work with a command line
        exclusively, most distributions focus on the graphical
        environment.</para>

        <para>This book is not a good example regarding this myth as it
        focuses on the command-line. However, that is because of the personal
        preference of the author.</para>
      </section>

      <section>
        <title>I cannot run my software under Linux</title>

        <para>For many Microsoft Windows titles, this is true. But there is
        almost certainly software available in Linux that offers the same
        features as the software you are referring to. Some software even
        <emphasis>is</emphasis> available for Linux: the popular browsers
        Firefox and Chrome are two examples, the freely available office suite
        OpenOffice.org is another.</para>

        <para>There are also Windows emulators and libraries that offer an
        interface allowing Microsoft Windows applications to run within Linux.
        I don't recommend using this software for every possible software
        title though. It is more of a last resort in case you definitely
        require a certain software title but already perform the majority of
        your work within Linux.</para>
      </section>

      <section>
        <title>Linux is secure</title>

        <para>This is also a myth. Linux is no more secure than Microsoft
        Windows or Apple's Mac OS X. Security is more than the sum of all
        vulnerabilities in software. It is based upon the competence of the
        user, the administrator, the configuration of the system and
        more.</para>

        <para>Linux can be made very secure: there are distributions that
        focus on security intensively through additional settings, kernel
        configurations, software choices and more. But you don't need such a
        distribution if you want to have a secure Linux system. Better is to
        read the security documentation of your distribution, make sure that
        you regularly update your system, don't start software you don't need
        or visit sites you know aren't legit.</para>
      </section>

      <section>
        <title>Linux is too fragmented to ever become a wider player</title>

        <para>Many groups refer to Linux as being fragmented because there are
        so many Linux distributions. However, a user of one distribution can
        easily work with users of other distributions (no issue here). A user
        of one distribution can also help users of other distributions,
        because their software is still the same (no issue here either). Even
        more, software created on one distribution runs perfectly on another
        distribution (no issue here). The widespread availability of
        distributions is a strength, not a weakness, as it offers more choice
        (and more expertise) to the end user.</para>

        <para>Perhaps people are referring to the various Linux kernel trees
        that exist. Yet, all these trees are based upon the same mainline
        kernel (often called the "vanilla kernel") and every time the mainline
        kernel brings out a new version, these trees update their own code so
        branches are never lagging behind. The additional trees that exist are
        there because of development purposes (additional patches for
        unsupported hardware before it is merged with the mainline kernel,
        additional patches for specific virtualisation solutions that are
        otherwise incompatible or cannot be merged due to license issues,
        additional patches that are too intrusive and will take a while before
        they are stabilized, etc.)</para>

        <para>Or perhaps people are referring to the various graphical
        environments (like KDE and GNOME). Yet, they do not speak about the
        interoperability between those graphical environments (you can run KDE
        applications in GNOME and vice versa), the standards that this
        diversity creates (standards on dealing with file formats, menu
        entries, object linking and more), and more.</para>

        <para>Controlled fragmentation is what Linux (and free software in
        general) offers. Controlled, because it is matched with open standards
        and free specifications that are well documented and that all software
        adheres to. Fragmented because the community wants to offer more
        choices to the end users. </para>
      </section>

      <section>
        <title>Linux is an alternative for Microsoft Windows</title>

        <para>Linux isn't an alternative, but a different operating system.
        There's a difference between the terms. Alternatives try to offer the
        same functionality and interface, but using different means. Linux is
        a different operating system, because it doesn't strive to offer the
        same functionality or interface of Microsoft Windows.</para>
      </section>

      <section>
        <title>Linux is anti-Microsoft</title>

        <para>It isn't because people that have certain feelings about
        Microsoft are often using Linux, that Linux is anti-Microsoft. The
        Linux operating system wants nothing more than be fully interoperable
        with any other operating system. Software projects most definitely
        want their software to run on any operating system, not only Microsoft
        Windows or Linux. </para>
      </section>
    </section>

    <section>
      <title>Weaknesses</title>

      <para>Yet not all information spread around are myths. Some are real
      weaknesses that Linux still needs to work on.</para>

      <section>
        <title>Linux has little support for games</title>

        <para>True. Although there are many free software games around, most
        games are developed for Microsoft Windows exclusively, and not all
        games can be run using emulators or libraries like WINE within Linux
        (luckily, many are). It is hard to ask game developers to develop for
        Linux as most developers focus their endeavours on libraries (like
        DirectX) that are only available for Microsoft Windows.</para>

        <para>However, another trend is also emerging: more and more games are
        only being released on consoles, dropping the PC environment
        altogether. I personally don't know how games will evolve in the
        future, but I think that real action games will focus on game consoles
        more.</para>

        <para>Still, gaming is a sore weak spot of the Linux operating
        system.</para>
      </section>

      <section>
        <title>Recent hardware isn't quickly adopted within Linux</title>

        <para>If the vendor of the hardware doesn't offer Linux drivers, then
        it does take a while before the hardware support is brought within the
        Linux kernel. However, this is not a process spanning multiple years,
        but rather months. Chances are that a brand-new graphic card / sound
        card is supported within 3 to 6 months after being released.</para>

        <para>The same is true for wireless network cards. Whereas this was a
        weakness previously, support for wireless network cards is now well
        integrated within the community. A major reason here is that most
        vendors are now officially supporting their wireless chip set for
        Linux, offering drivers and documentation.</para>
      </section>
    </section>
  </section>

  <section>
    <title>Exercises</title>

    <orderedlist>
      <listitem>
        <para>Create a list of Linux distributions you have heard of and
        check, for every one of them, how they perform in the fields you find
        important (for instance, availability of documentation, translations,
        support for specific hardware, multimedia, ...).</para>
      </listitem>

      <listitem>
        <para>List 7 CPU architectures.</para>
      </listitem>

      <listitem>
        <para>Why are new kernel releases not distributed to the end user
        immediately? What role do distributions play in this process?</para>
      </listitem>
    </orderedlist>
  </section>

  <section>
    <title id="whatislinux_resources">Further Resources</title>

    <itemizedlist>
      <listitem>
        <para><ulink url="http://www.dwheeler.com/oss_fs_why.html">Why Open
        Source / Free Software</ulink>, by David A. Wheeler - a paper on using
        Open Source Software / Free Software (OSS/FS).</para>
      </listitem>

      <listitem>
        <para><ulink url="http://www.distrowatch.com">Distrowatch</ulink>, a
        popular site that attempts to track all available Linux distributions
        and has weekly news coverage.</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
